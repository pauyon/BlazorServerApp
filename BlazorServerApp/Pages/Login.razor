@page "/login"
@inject UserAccountService UserAccountService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3>Login</h3>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>Username</label>
            <input @bind="model.Username" class="form-control" placeholder="Username">
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" @oninput="UpdatePassword" type="password" class="form-control" placeholder="Password">
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private Model model = new();

    private void UpdatePassword(ChangeEventArgs e)
    {
        model.Password = e.Value.ToString();
    }

    private async Task Authenticate()
    {
        var userAccount = UserAccountService.GetByUsername(model.Username);

        if (userAccount == null || userAccount.Password != model.Password)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Invalid username or password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;

        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });

        NavigationManager.NavigateTo("/", true);
    }
}
